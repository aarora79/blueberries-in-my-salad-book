activeClientUrl="https://amit-arora.rstudio.cloud/7cacb71af4d046d888bfbaf9bbb204e2/"
build-last-errors="[]"
build-last-errors-base-dir=""
build-last-outputs="[]"
compile_pdf_state="{\"tab_visible\":false,\"running\":false,\"target_file\":\"\",\"output\":\"\",\"errors\":[]}"
files.monitored-path=""
find-in-files-state="{\"handle\":\"6c1a2071b65b4c15a6ed232f1f809fa0\",\"input\":\"Date\",\"path\":\"/cloud/project\",\"regex\":false,\"ignoreCase\":true,\"results\":{\"file\":[\"/cloud/project/raw_data/data.csv\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/05-what-we-accomplished.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/04-exercise.Rmd\",\"/cloud/project/LICENSE.md\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/index.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/bookdownproj.Rmd\",\"/cloud/project/02-how-it-began.Rmd\",\"/cloud/project/globals.R\",\"/cloud/project/globals.R\",\"/cloud/project/globals.R\",\"/cloud/project/globals.R\",\"/cloud/project/06-other-topics.Rmd\",\"/cloud/project/06-other-topics.Rmd\",\"/cloud/project/03-clean-eating.Rmd\",\"/cloud/project/03-clean-eating.Rmd\",\"/cloud/project/03-clean-eating.Rmd\",\"/cloud/project/03-clean-eating.Rmd\",\"/cloud/project/03-clean-eating.Rmd\",\"/cloud/project/03-clean-eating.Rmd\",\"/cloud/project/03-clean-eating.Rmd\",\"/cloud/project/03-clean-eating.Rmd\",\"/cloud/project/03-clean-eating.Rmd\",\"/cloud/project/03-clean-eating.Rmd\",\"/cloud/project/03-clean-eating.Rmd\",\"/cloud/project/03-clean-eating.Rmd\"],\"line\":[1,12,52,61,62,70,72,76,81,82,93,160,172,174,179,193,198,217,244,246,248,259,261,264,268,272,289,291,294,298,302,61,62,63,66,71,72,73,74,80,81,82,83,98,99,147,148,151,152,154,155,157,161,163,164,170,174,178,129,4,51,62,65,68,69,89,90,91,98,99,100,103,105,106,119,125,129,131,134,137,159,160,161,167,168,169,177,179,181,184,192,194,196,199,213,214,229,247,4,51,62,65,68,69,89,90,91,98,99,100,103,105,106,119,125,129,131,134,137,159,160,161,167,168,169,177,179,181,184,192,194,196,199,213,214,229,247,342,416,419,423,425,429,431,435,437,441,455,459,460,565,566,567,570,575,576,577,578,584,585,586,587,602,603,651,652,655,656,658,659,661,665,667,668,674,678,682,749,789,798,799,807,809,813,818,819,830,897,909,911,916,930,935,954,981,983,985,996,998,1001,1005,1009,1026,1028,1031,1035,1039,1104,1119,43,7,15,42,84,58,73,64,67,71,73,77,79,83,85,89,103,107,108],\"lineValue\":[\"name,date,weight,body-fat-percentage,bmi,hydration-percentage,total-lean-mass-percentage,muscle-percentage,lean-mass\",\"# in asc order of the date so the first date for each group (name in this case)\",\"mutate(days_since_start = as.character((Date-lag(Date)))) %>%\",\"# what we do is as follows: calc the cumulative loss from the latest date\",\"# and then assign a row number, the rn==1 corresponds to latest date so we\",\"select(name, Date, value) %>%\",\"arrange(desc(Date), .by_group=TRUE) %>%\",\"arrange(desc(Date)) %>%\",\"select(name, Date) %>%\",\"mutate(days_taken_to_lost_last_n_pounds = as.character(-1*(Date-lag(Date)))) %>%\",\"mutate(m = MONTH_ABB[month(Date)]) %>%\",\"labs(title=glue(\\\"How much of the weight loss goal has been accomplished as of {max(df_tidy$Date, na.rm=TRUE)}?\\\"))\",\"ggplot(aes(x=Date, y=value, col=name)) +\",\"scale_x_date(date_breaks = \\\"1 month\\\", date_labels = \\\"%b\\\") +\",\"subtitle=glue(\\\"Tracking weight and other biometrics, Timespan: {min(df_tidy$Date)} to {max(df_tidy$Date)}.\\\"),\",\"ggplot(aes(x=date, y=value, col=name)) +\",\"subtitle=glue(\\\"All measurements in inches. Timespan: {min(df_measurements$date)} to {max(df_measurements$date)}.\\\"),\",\"mutate(week=week(Date)-week(min(df_daily_wt_loss$Date))+1)\",\"As we were going through this journey, I was very eager to apply some forecasting and determine if we could project a reasonable date when we would be able to meet our weight loss target. As much as this book is not just about weight loss, there is no denying the fact that it was one of the most (if...\",\"Once we had collected a reasonable amount of data, I used standard timeseries forecasting techniques to determine how our weights would look say 30, 90 or 180 days from the current date. I used the [Prophet](https://facebook.github.io/prophet/#:~:text=Prophet%20is%20a%20procedure%20for,daily%20seaso...\",\"Once we had these forecasted date and the plots created, we started monitoring very closely if our daily weight measurements were within the range of errors as shown in these plots. Some days the weight did creep out of the error limits but then it served as a nice tool to keep us honest, so in a ma...\",\"annotate(\\\"point\\\", x = df_target_achieved_p2$date, y = df_target_achieved_p2$target, colour = \\\"darkgreen\\\", size = 1.5, alpha=1) +\",\"geom = \\\"curve\\\", xend = df_target_achieved_p2$date, yend = df_target_achieved_p2$target+1, x = df_target_achieved_p2$date+2, y = df_target_achieved_p2$target+4,\",\"annotate(geom = \\\"text\\\", x = df_target_achieved_p2$date-25, y = df_target_achieved_p2$target+7, label = glue(\\\"(Dt: {df_target_achieved_p2$date}, Wt: {df_target_achieved_p2$target} lb)\\\"), size=6, hjust = \\\"left\\\") +\",\"scale_x_date(date_breaks = \\\"3 month\\\", date_labels = \\\"%b %Y\\\") +\",\"subtitle=glue(\\\"Forecast done on {FORECAST_DATE}.\\\"),\",\"annotate(\\\"point\\\", x = df_target_achieved_p1$date, y = df_target_achieved_p1$target, colour = \\\"darkgreen\\\", size = 1.5, alpha=1) +\",\"geom = \\\"curve\\\", xend = df_target_achieved_p1$date, yend = df_target_achieved_p1$target, x = df_target_achieved_p1$date+2, y = df_target_achieved_p1$target+1,\",\"annotate(geom = \\\"text\\\", x = df_target_achieved_p1$date+2, y = df_target_achieved_p1$target+2, label = glue(\\\"(Dt: {df_target_achieved_p1$date}, Wt: {df_target_achieved_p1$target} lb)\\\"), size=7, hjust = \\\"left\\\") +\",\"scale_x_date(date_breaks = \\\"3 month\\\", date_labels = \\\"%b %Y\\\") +\",\"subtitle=glue(\\\"Forecast done on {FORECAST_DATE}.\\\"),\",\"df_exercise_dates <- df_exercise_dates %>%\",\"gather(name, exercise, -date) %>%\",\"rename(Date=date)\",\"left_join(df_exercise_dates, by=c(\\\"Date\\\", \\\"name\\\")) %>%\",\"select(Date, name, loss_per_day) %>%\",\"group_by(Date, name) %>%\",\"filter(loss_per_day==max(loss_per_day)), by=c(\\\"Date\\\", \\\"name\\\")) %>%\",\"rename(DateCol=Date, ValueCol=loss_per_day) %>%\",\"mutate(weekday = wday(DateCol, label = T, week_start = 7), # can put week_start = 1 to start week on Monday\",\"month = month(DateCol, label = T),\",\"date = yday(DateCol),\",\"week = epiweek(DateCol))\",\"geom_text(aes(label = ifelse(exercise == 1, glue(\\\"{day(DateCol)} [E]\\\"), day(DateCol))), size = 4, color = \\\"black\\\") + # day(DateCol)\",\"#geom_text(aes(label = ifelse(exercise == 1, glue(\\\"{round(ValueCol, 2)} [I]\\\"), round(ValueCol, 2))), size = 2.5, color = \\\"black\\\") + # day(DateCol)\",\"mutate(date=as.Date(date)) %>%\",\"group_by(date) %>%\",\"mutate(date=as.Date(date)) %>%\",\"group_by(date) %>%\",\"time_duration_in_weeks <- ceiling(as.numeric(difftime(max(df_dl$date), min(df_dl$date), units=\\\"weeks\\\")))\",\"df2 <- df_wt_loss %>% ungroup() %>% filter(name==P2_NAME) %>% select(Date, value) %>% rename(date=Date) %>% mutate(median_deadlift_wt=200)\",\"mutate(label=ifelse(date==min(date), glue(\\\"Body weight. (lb)\\\"), NA)) %>%\",\"ggplot(aes(x=date, group=date, weight, fill=median_deadlift_wt)) +\",\"geom_point(data=df2, aes(x=date, y=weight, col=I(\\\"purple\\\")), size=0.7, show.legend = TRUE) +\",\"# geom_point(data=df_dl_median, aes(x=date, y=median_deadlift_wt), size=0.7, show.legend = TRUE) +\",\"geom_label(aes(min(df_dl$date) + 15, P2_DEADLIFT_TARGET_WEIGHT-2,\",\"geom_label(aes(min(df_dl$date) + 15, P2_TARGET_WEIGHT-2,\",\"scale_x_date(date_breaks = \\\"1 month\\\", date_labels = \\\"%b\\\") +\",\"1. automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\",\"date: \\\"`r format(Sys.time(), '%B %Y')`\\\"\",\"library(lubridate)\",\"mutate(Date=ymd(Date)) %>%\",\"mutate(Date=ymd(Date))%>%\",\"df_p1_starting_weight <- df_P1 %>% filter(Date == min(Date, na.rm=TRUE)) %>% pull(Weight)\",\"df_p2_starting_weight <- df_P2 %>% filter(Date == min(Date, na.rm=TRUE)) %>% pull(Weight)\",\"arrange(Date) %>%\",\"mutate(Date=ymd(Date)) %>%\",\"filter(Date >= START_DATE) %>%\",\"arrange(Date) %>%\",\"mutate(Date=ymd(Date)) %>%\",\"filter(Date >= START_DATE) %>%\",\"# read the important dates csv file. This is needed because we would like to annotate this journey\",\"if(!is.na(IMPORTANT_DATES_FPATH)) {\",\"important_dates <- read_csv(IMPORTANT_DATES_FPATH)\",\"gather(metric, value, -Date, -name) %>%\",\"# data for two people and then arranging by date while maintaining\",\"select(name, Date, value) %>%\",\"arrange(Date, .by_group=TRUE) %>%\",\"# is the curse of the weekend real? Assign the day to each date so that we can determine\",\"mutate(day = weekdays(as.Date(Date)))\",\"# how many days did it take for each pound to drop? This is found by finding the max date i.e. the last date\",\"# on which each weight (as a whole number, so 230, 229 etc) was seen and then subtracting that date from\",\"# the last date of the previous highest weight. So if 230 was say the 20th pound to drop (if we started from 250 say)\",\"summarize(Date=max(Date)) %>%\",\"arrange(desc(Date)) %>%\",\"mutate(value_diff=value-lag(value), days=abs(as.numeric(Date-lag(Date)))) %>%\",\"mutate(ds=as.Date(ds)) %>%\",\"select(Date, metric, value, name) %>%\",\"group_by(Date) %>%\",\"by = c(\\\"ds\\\"=\\\"Date\\\")) %>%\",\"mutate(ds=as.Date(ds)) %>%\",\"select(Date, metric, value, name) %>%\",\"group_by(Date) %>%\",\"by = c(\\\"ds\\\"=\\\"Date\\\")) %>%\",\"# exercise dates for calendar plot\",\"df_exercise_dates <- read_csv(EXERCISE_DATES_URL)\",\"select(Date, loss_per_day) %>%\",\"select(Date, loss_per_day) %>%\",\"date: \\\"`r format(Sys.time(), '%B %Y')`\\\"\",\"library(lubridate)\",\"mutate(Date=ymd(Date)) %>%\",\"mutate(Date=ymd(Date))%>%\",\"df_p1_starting_weight <- df_P1 %>% filter(Date == min(Date, na.rm=TRUE)) %>% pull(Weight)\",\"df_p2_starting_weight <- df_P2 %>% filter(Date == min(Date, na.rm=TRUE)) %>% pull(Weight)\",\"arrange(Date) %>%\",\"mutate(Date=ymd(Date)) %>%\",\"filter(Date >= START_DATE) %>%\",\"arrange(Date) %>%\",\"mutate(Date=ymd(Date)) %>%\",\"filter(Date >= START_DATE) %>%\",\"# read the important dates csv file. This is needed because we would like to annotate this journey\",\"if(!is.na(IMPORTANT_DATES_FPATH)) {\",\"important_dates <- read_csv(IMPORTANT_DATES_FPATH)\",\"gather(metric, value, -Date, -name) %>%\",\"# data for two people and then arranging by date while maintaining\",\"select(name, Date, value) %>%\",\"arrange(Date, .by_group=TRUE) %>%\",\"# is the curse of the weekend real? Assign the day to each date so that we can determine\",\"mutate(day = weekdays(as.Date(Date)))\",\"# how many days did it take for each pound to drop? This is found by finding the max date i.e. the last date\",\"# on which each weight (as a whole number, so 230, 229 etc) was seen and then subtracting that date from\",\"# the last date of the previous highest weight. So if 230 was say the 20th pound to drop (if we started from 250 say)\",\"summarize(Date=max(Date)) %>%\",\"arrange(desc(Date)) %>%\",\"mutate(value_diff=value-lag(value), days=abs(as.numeric(Date-lag(Date)))) %>%\",\"mutate(ds=as.Date(ds)) %>%\",\"select(Date, metric, value, name) %>%\",\"group_by(Date) %>%\",\"by = c(\\\"ds\\\"=\\\"Date\\\")) %>%\",\"mutate(ds=as.Date(ds)) %>%\",\"select(Date, metric, value, name) %>%\",\"group_by(Date) %>%\",\"by = c(\\\"ds\\\"=\\\"Date\\\")) %>%\",\"# exercise dates for calendar plot\",\"df_exercise_dates <- read_csv(EXERCISE_DATES_URL)\",\"select(Date, loss_per_day) %>%\",\"select(Date, loss_per_day) %>%\",\"subtitle=glue(\\\"All weights in pounds. Starting date: {min(df_P2$Date, na.rm=TRUE)}.\\\"),\",\"df_clean_eating_dates <- important_dates %>%\",\"df_iter1 <- df_clean_eating_dates %>%\",\"spread(label, Date)\",\"df_iter2 <- df_clean_eating_dates %>%\",\"spread(label, Date)\",\"df_clean_eating_dates <- bind_rows(df_iter1, df_iter2)\",\"ggplot(aes(x=Date, y=value, col=name)) +\",\"geom_rect(data=df_clean_eating_dates, aes(x = NULL,y = NULL,xmin=Start, xmax=End,\",\"scale_x_date(date_breaks = \\\"1 month\\\", date_labels = \\\"%b\\\") +\",\"...timespan from `r {min(df_tidy$Date)}` to `r {max(df_tidy$Date)}`.\",\"mutate(clean_eating = ifelse(between(Date, df_iter1$Start, df_iter1$End) |\",\"between(Date, df_iter2$Start, df_iter2$End),\",\"df_exercise_dates <- df_exercise_dates %>%\",\"gather(name, exercise, -date) %>%\",\"rename(Date=date)\",\"left_join(df_exercise_dates, by=c(\\\"Date\\\", \\\"name\\\")) %>%\",\"select(Date, name, loss_per_day) %>%\",\"group_by(Date, name) %>%\",\"filter(loss_per_day==max(loss_per_day)), by=c(\\\"Date\\\", \\\"name\\\")) %>%\",\"rename(DateCol=Date, ValueCol=loss_per_day) %>%\",\"mutate(weekday = wday(DateCol, label = T, week_start = 7), # can put week_start = 1 to start week on Monday\",\"month = month(DateCol, label = T),\",\"date = yday(DateCol),\",\"week = epiweek(DateCol))\",\"geom_text(aes(label = ifelse(exercise == 1, glue(\\\"{day(DateCol)} [E]\\\"), day(DateCol))), size = 4, color = \\\"black\\\") + # day(DateCol)\",\"#geom_text(aes(label = ifelse(exercise == 1, glue(\\\"{round(ValueCol, 2)} [I]\\\"), round(ValueCol, 2))), size = 2.5, color = \\\"black\\\") + # day(DateCol)\",\"mutate(date=as.Date(date)) %>%\",\"group_by(date) %>%\",\"mutate(date=as.Date(date)) %>%\",\"group_by(date) %>%\",\"time_duration_in_weeks <- ceiling(as.numeric(difftime(max(df_dl$date), min(df_dl$date), units=\\\"weeks\\\")))\",\"df2 <- df_wt_loss %>% ungroup() %>% filter(name==P2_NAME) %>% select(Date, value) %>% rename(date=Date) %>% mutate(median_deadlift_wt=200)\",\"mutate(label=ifelse(date==min(date), glue(\\\"Body weight. (lb)\\\"), NA)) %>%\",\"ggplot(aes(x=date, group=date, weight, fill=median_deadlift_wt)) +\",\"geom_point(data=df2, aes(x=date, y=weight, col=I(\\\"purple\\\")), size=0.7, show.legend = TRUE) +\",\"# geom_point(data=df_dl_median, aes(x=date, y=median_deadlift_wt), size=0.7, show.legend = TRUE) +\",\"geom_label(aes(min(df_dl$date) + 15, P2_DEADLIFT_TARGET_WEIGHT-2,\",\"geom_label(aes(min(df_dl$date) + 15, P2_TARGET_WEIGHT-2,\",\"scale_x_date(date_breaks = \\\"1 month\\\", date_labels = \\\"%b\\\") +\",\"# in asc order of the date so the first date for each group (name in this case)\",\"mutate(days_since_start = as.character((Date-lag(Date)))) %>%\",\"# what we do is as follows: calc the cumulative loss from the latest date\",\"# and then assign a row number, the rn==1 corresponds to latest date so we\",\"select(name, Date, value) %>%\",\"arrange(desc(Date), .by_group=TRUE) %>%\",\"arrange(desc(Date)) %>%\",\"select(name, Date) %>%\",\"mutate(days_taken_to_lost_last_n_pounds = as.character(-1*(Date-lag(Date)))) %>%\",\"mutate(m = MONTH_ABB[month(Date)]) %>%\",\"labs(title=glue(\\\"How much of the weight loss goal has been accomplished as of {max(df_tidy$Date, na.rm=TRUE)}?\\\"))\",\"ggplot(aes(x=Date, y=value, col=name)) +\",\"scale_x_date(date_breaks = \\\"1 month\\\", date_labels = \\\"%b\\\") +\",\"subtitle=glue(\\\"Tracking weight and other biometrics, Timespan: {min(df_tidy$Date)} to {max(df_tidy$Date)}.\\\"),\",\"ggplot(aes(x=date, y=value, col=name)) +\",\"subtitle=glue(\\\"All measurements in inches. Timespan: {min(df_measurements$date)} to {max(df_measurements$date)}.\\\"),\",\"mutate(week=week(Date)-week(min(df_daily_wt_loss$Date))+1)\",\"As we were going through this journey, I was very eager to apply some forecasting and determine if we could project a reasonable date when we would be able to meet our weight loss target. As much as this book is not just about weight loss, there is no denying the fact that it was one of the most (if...\",\"Once we had collected a reasonable amount of data, I used standard timeseries forecasting techniques to determine how our weights would look say 30, 90 or 180 days from the current date. I used the [Prophet](https://facebook.github.io/prophet/#:~:text=Prophet%20is%20a%20procedure%20for,daily%20seaso...\",\"Once we had these forecasted date and the plots created, we started monitoring very closely if our daily weight measurements were within the range of errors as shown in these plots. Some days the weight did creep out of the error limits but then it served as a nice tool to keep us honest, so in a ma...\",\"annotate(\\\"point\\\", x = df_target_achieved_p2$date, y = df_target_achieved_p2$target, colour = \\\"darkgreen\\\", size = 1.5, alpha=1) +\",\"geom = \\\"curve\\\", xend = df_target_achieved_p2$date, yend = df_target_achieved_p2$target+1, x = df_target_achieved_p2$date+2, y = df_target_achieved_p2$target+4,\",\"annotate(geom = \\\"text\\\", x = df_target_achieved_p2$date-25, y = df_target_achieved_p2$target+7, label = glue(\\\"(Dt: {df_target_achieved_p2$date}, Wt: {df_target_achieved_p2$target} lb)\\\"), size=6, hjust = \\\"left\\\") +\",\"scale_x_date(date_breaks = \\\"3 month\\\", date_labels = \\\"%b %Y\\\") +\",\"subtitle=glue(\\\"Forecast done on {FORECAST_DATE}.\\\"),\",\"annotate(\\\"point\\\", x = df_target_achieved_p1$date, y = df_target_achieved_p1$target, colour = \\\"darkgreen\\\", size = 1.5, alpha=1) +\",\"geom = \\\"curve\\\", xend = df_target_achieved_p1$date, yend = df_target_achieved_p1$target, x = df_target_achieved_p1$date+2, y = df_target_achieved_p1$target+1,\",\"annotate(geom = \\\"text\\\", x = df_target_achieved_p1$date+2, y = df_target_achieved_p1$target+2, label = glue(\\\"(Dt: {df_target_achieved_p1$date}, Wt: {df_target_achieved_p1$target} lb)\\\"), size=7, hjust = \\\"left\\\") +\",\"scale_x_date(date_breaks = \\\"3 month\\\", date_labels = \\\"%b %Y\\\") +\",\"subtitle=glue(\\\"Forecast done on {FORECAST_DATE}.\\\"),\",\"select(-metric, -Date) %>%\",\"select(-metric, -Date) %>%\",\"subtitle=glue(\\\"All weights in pounds. Starting date: {min(df_P2$Date, na.rm=TRUE)}.\\\"),\",\"IMPORTANT_DATES_FPATH <- \\\"https://raw.githubusercontent.com/aarora79/biomettracker/master/data/important_dates.csv\\\"\",\"EXERCISE_DATES_URL <- \\\"https://raw.githubusercontent.com/aarora79/biomettracker/master/raw_data/exercise_dates.csv\\\"\",\"START_DATE <- \\\"2020-02-17\\\"\",\"FORECAST_DATE <- \\\"August 16, 2020\\\"\",\"select(-metric, -Date) %>%\",\"select(-metric, -Date) %>%\",\"df_clean_eating_dates <- important_dates %>%\",\"df_iter1 <- df_clean_eating_dates %>%\",\"spread(label, Date)\",\"df_iter2 <- df_clean_eating_dates %>%\",\"spread(label, Date)\",\"df_clean_eating_dates <- bind_rows(df_iter1, df_iter2)\",\"ggplot(aes(x=Date, y=value, col=name)) +\",\"geom_rect(data=df_clean_eating_dates, aes(x = NULL,y = NULL,xmin=Start, xmax=End,\",\"scale_x_date(date_breaks = \\\"1 month\\\", date_labels = \\\"%b\\\") +\",\"...timespan from `r {min(df_tidy$Date)}` to `r {max(df_tidy$Date)}`.\",\"mutate(clean_eating = ifelse(between(Date, df_iter1$Start, df_iter1$End) |\",\"between(Date, df_iter2$Start, df_iter2$End),\"],\"matchOn\":[[5],[22,40],[40,49],[69],[64],[13],[13],[13],[13],[59,68],[27],[91],[13],[8,13,38],[76,99],[13],[74,105],[17,49],[129],[181],[29,810],[44],[45,116],[50,137],[8,13,38],[42],[44],[45,114],[50,136],[8,13,38],[42],[12,33],[24],[7,12],[22,35],[7],[9],[47],[7,15],[22],[14],[0,12],[15],[55,76,123],[138],[7,15,20],[9],[7,15,20],[9],[64,81],[69,93,98],[20,30],[13,25],[27],[38],[25],[25],[8,13,38],[27],[0],[13],[7,16],[7,16],[42,54],[42,54],[8],[7,16],[7,21],[8],[7,16],[7,21],[21],[20],[10,38],[23],[44],[13],[8],[59],[25,30],[85,104],[95],[11],[10,19],[13],[56,65],[13],[7],[9],[13],[13],[7],[9],[13],[11],[12,39],[7],[7],[0],[13],[7,16],[7,16],[42,54],[42,54],[8],[7,16],[7,21],[8],[7,16],[7,21],[21],[20],[10,38],[23],[44],[13],[8],[59],[25,30],[85,104],[95],[11],[10,19],[13],[56,65],[13],[7],[9],[13],[13],[7],[9],[13],[11],[12,39],[7],[7],[47,64],[16,35],[28],[14],[28],[14],[16],[13],[31],[8,13,38],[33,60],[37],[8],[12,33],[24],[7,12],[22,35],[7],[9],[47],[7,15],[22],[14],[0,12],[15],[55,76,123],[138],[7,15,20],[9],[7,15,20],[9],[64,81],[69,93,98],[20,30],[13,25],[27],[38],[25],[25],[8,13,38],[22,40],[40,49],[69],[64],[13],[13],[13],[13],[59,68],[27],[91],[13],[8,13,38],[76,99],[13],[74,105],[17,49],[129],[181],[29,810],[44],[45,116],[50,137],[8,13,38],[42],[44],[45,114],[50,136],[8,13,38],[42],[17],[17],[47,64],[10,105],[9,105],[6],[9],[17],[17],[16,35],[28],[14],[28],[14],[16],[13],[31],[8,13,38],[33,60],[37],[8]],\"matchOff\":[[9],[26,44],[44,53],[73],[68],[17],[17],[17],[17],[63,72],[31],[95],[17],[12,17,42],[80,103],[17],[78,109],[21,53],[133],[185],[33,814],[48],[49,120],[54,141],[12,17,42],[46],[48],[49,118],[54,140],[12,17,42],[46],[16,37],[28],[11,16],[26,39],[11],[13],[51],[11,19],[26],[18],[4,16],[19],[59,80,127],[142],[11,19,24],[13],[11,19,24],[13],[68,85],[73,97,102],[24,34],[17,29],[31],[42],[29],[29],[12,17,42],[31],[4],[17],[11,20],[11,20],[46,58],[46,58],[12],[11,20],[11,25],[12],[11,20],[11,25],[25],[24],[14,42],[27],[48],[17],[12],[63],[29,34],[89,108],[99],[15],[14,23],[17],[60,69],[17],[11],[13],[17],[17],[11],[13],[17],[15],[16,43],[11],[11],[4],[17],[11,20],[11,20],[46,58],[46,58],[12],[11,20],[11,25],[12],[11,20],[11,25],[25],[24],[14,42],[27],[48],[17],[12],[63],[29,34],[89,108],[99],[15],[14,23],[17],[60,69],[17],[11],[13],[17],[17],[11],[13],[17],[15],[16,43],[11],[11],[51,68],[20,39],[32],[18],[32],[18],[20],[17],[35],[12,17,42],[37,64],[41],[12],[16,37],[28],[11,16],[26,39],[11],[13],[51],[11,19],[26],[18],[4,16],[19],[59,80,127],[142],[11,19,24],[13],[11,19,24],[13],[68,85],[73,97,102],[24,34],[17,29],[31],[42],[29],[29],[12,17,42],[26,44],[44,53],[73],[68],[17],[17],[17],[17],[63,72],[31],[95],[17],[12,17,42],[80,103],[17],[78,109],[21,53],[133],[185],[33,814],[48],[49,120],[54,141],[12,17,42],[46],[48],[49,118],[54,140],[12,17,42],[46],[21],[21],[51,68],[14,109],[13,109],[10],[13],[21],[21],[20,39],[32],[18],[32],[18],[20],[17],[35],[12,17,42],[37,64],[41],[12]],\"replaceMatchOnreplaceMatchOff},\"running\":false,\"replace\":false,\"preview\":false,\"gitFlag\":false,\"replacePattern\":\"\"}"
imageDirtyState="1"
portToken="1cf09a9f6418"
saveActionState="-1"
